// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: chatpdf.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChatpdfService_GetContext_FullMethodName            = "/pb.ChatpdfService/GetContext"
	ChatpdfService_GetContextWithoutAuth_FullMethodName = "/pb.ChatpdfService/GetContextWithoutAuth"
	ChatpdfService_GetChatpdfs_FullMethodName           = "/pb.ChatpdfService/GetChatpdfs"
	ChatpdfService_CreateChatpdf_FullMethodName         = "/pb.ChatpdfService/CreateChatpdf"
	ChatpdfService_DeleteChatpdf_FullMethodName         = "/pb.ChatpdfService/DeleteChatpdf"
	ChatpdfService_GetFileUrl_FullMethodName            = "/pb.ChatpdfService/GetFileUrl"
)

// ChatpdfServiceClient is the client API for ChatpdfService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatpdfServiceClient interface {
	GetContext(ctx context.Context, in *GetContextReq, opts ...grpc.CallOption) (*GetContextRes, error)
	GetContextWithoutAuth(ctx context.Context, in *GetContextReq, opts ...grpc.CallOption) (*GetContextRes, error)
	GetChatpdfs(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (ChatpdfService_GetChatpdfsClient, error)
	CreateChatpdf(ctx context.Context, in *CreateChatpdfReq, opts ...grpc.CallOption) (*GenericRes, error)
	DeleteChatpdf(ctx context.Context, in *GenericReq, opts ...grpc.CallOption) (*GenericRes, error)
	GetFileUrl(ctx context.Context, in *GenericReq, opts ...grpc.CallOption) (*GenericRes, error)
}

type chatpdfServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatpdfServiceClient(cc grpc.ClientConnInterface) ChatpdfServiceClient {
	return &chatpdfServiceClient{cc}
}

func (c *chatpdfServiceClient) GetContext(ctx context.Context, in *GetContextReq, opts ...grpc.CallOption) (*GetContextRes, error) {
	out := new(GetContextRes)
	err := c.cc.Invoke(ctx, ChatpdfService_GetContext_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatpdfServiceClient) GetContextWithoutAuth(ctx context.Context, in *GetContextReq, opts ...grpc.CallOption) (*GetContextRes, error) {
	out := new(GetContextRes)
	err := c.cc.Invoke(ctx, ChatpdfService_GetContextWithoutAuth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatpdfServiceClient) GetChatpdfs(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (ChatpdfService_GetChatpdfsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatpdfService_ServiceDesc.Streams[0], ChatpdfService_GetChatpdfs_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &chatpdfServiceGetChatpdfsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatpdfService_GetChatpdfsClient interface {
	Recv() (*Chatpdf, error)
	grpc.ClientStream
}

type chatpdfServiceGetChatpdfsClient struct {
	grpc.ClientStream
}

func (x *chatpdfServiceGetChatpdfsClient) Recv() (*Chatpdf, error) {
	m := new(Chatpdf)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatpdfServiceClient) CreateChatpdf(ctx context.Context, in *CreateChatpdfReq, opts ...grpc.CallOption) (*GenericRes, error) {
	out := new(GenericRes)
	err := c.cc.Invoke(ctx, ChatpdfService_CreateChatpdf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatpdfServiceClient) DeleteChatpdf(ctx context.Context, in *GenericReq, opts ...grpc.CallOption) (*GenericRes, error) {
	out := new(GenericRes)
	err := c.cc.Invoke(ctx, ChatpdfService_DeleteChatpdf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatpdfServiceClient) GetFileUrl(ctx context.Context, in *GenericReq, opts ...grpc.CallOption) (*GenericRes, error) {
	out := new(GenericRes)
	err := c.cc.Invoke(ctx, ChatpdfService_GetFileUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatpdfServiceServer is the server API for ChatpdfService service.
// All implementations must embed UnimplementedChatpdfServiceServer
// for forward compatibility
type ChatpdfServiceServer interface {
	GetContext(context.Context, *GetContextReq) (*GetContextRes, error)
	GetContextWithoutAuth(context.Context, *GetContextReq) (*GetContextRes, error)
	GetChatpdfs(*EmptyReq, ChatpdfService_GetChatpdfsServer) error
	CreateChatpdf(context.Context, *CreateChatpdfReq) (*GenericRes, error)
	DeleteChatpdf(context.Context, *GenericReq) (*GenericRes, error)
	GetFileUrl(context.Context, *GenericReq) (*GenericRes, error)
	mustEmbedUnimplementedChatpdfServiceServer()
}

// UnimplementedChatpdfServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatpdfServiceServer struct {
}

func (UnimplementedChatpdfServiceServer) GetContext(context.Context, *GetContextReq) (*GetContextRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContext not implemented")
}
func (UnimplementedChatpdfServiceServer) GetContextWithoutAuth(context.Context, *GetContextReq) (*GetContextRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContextWithoutAuth not implemented")
}
func (UnimplementedChatpdfServiceServer) GetChatpdfs(*EmptyReq, ChatpdfService_GetChatpdfsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetChatpdfs not implemented")
}
func (UnimplementedChatpdfServiceServer) CreateChatpdf(context.Context, *CreateChatpdfReq) (*GenericRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChatpdf not implemented")
}
func (UnimplementedChatpdfServiceServer) DeleteChatpdf(context.Context, *GenericReq) (*GenericRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChatpdf not implemented")
}
func (UnimplementedChatpdfServiceServer) GetFileUrl(context.Context, *GenericReq) (*GenericRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileUrl not implemented")
}
func (UnimplementedChatpdfServiceServer) mustEmbedUnimplementedChatpdfServiceServer() {}

// UnsafeChatpdfServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatpdfServiceServer will
// result in compilation errors.
type UnsafeChatpdfServiceServer interface {
	mustEmbedUnimplementedChatpdfServiceServer()
}

func RegisterChatpdfServiceServer(s grpc.ServiceRegistrar, srv ChatpdfServiceServer) {
	s.RegisterService(&ChatpdfService_ServiceDesc, srv)
}

func _ChatpdfService_GetContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContextReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatpdfServiceServer).GetContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatpdfService_GetContext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatpdfServiceServer).GetContext(ctx, req.(*GetContextReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatpdfService_GetContextWithoutAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContextReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatpdfServiceServer).GetContextWithoutAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatpdfService_GetContextWithoutAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatpdfServiceServer).GetContextWithoutAuth(ctx, req.(*GetContextReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatpdfService_GetChatpdfs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatpdfServiceServer).GetChatpdfs(m, &chatpdfServiceGetChatpdfsServer{stream})
}

type ChatpdfService_GetChatpdfsServer interface {
	Send(*Chatpdf) error
	grpc.ServerStream
}

type chatpdfServiceGetChatpdfsServer struct {
	grpc.ServerStream
}

func (x *chatpdfServiceGetChatpdfsServer) Send(m *Chatpdf) error {
	return x.ServerStream.SendMsg(m)
}

func _ChatpdfService_CreateChatpdf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatpdfReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatpdfServiceServer).CreateChatpdf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatpdfService_CreateChatpdf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatpdfServiceServer).CreateChatpdf(ctx, req.(*CreateChatpdfReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatpdfService_DeleteChatpdf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenericReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatpdfServiceServer).DeleteChatpdf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatpdfService_DeleteChatpdf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatpdfServiceServer).DeleteChatpdf(ctx, req.(*GenericReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatpdfService_GetFileUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenericReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatpdfServiceServer).GetFileUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatpdfService_GetFileUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatpdfServiceServer).GetFileUrl(ctx, req.(*GenericReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatpdfService_ServiceDesc is the grpc.ServiceDesc for ChatpdfService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatpdfService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ChatpdfService",
	HandlerType: (*ChatpdfServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetContext",
			Handler:    _ChatpdfService_GetContext_Handler,
		},
		{
			MethodName: "GetContextWithoutAuth",
			Handler:    _ChatpdfService_GetContextWithoutAuth_Handler,
		},
		{
			MethodName: "CreateChatpdf",
			Handler:    _ChatpdfService_CreateChatpdf_Handler,
		},
		{
			MethodName: "DeleteChatpdf",
			Handler:    _ChatpdfService_DeleteChatpdf_Handler,
		},
		{
			MethodName: "GetFileUrl",
			Handler:    _ChatpdfService_GetFileUrl_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetChatpdfs",
			Handler:       _ChatpdfService_GetChatpdfs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chatpdf.proto",
}
