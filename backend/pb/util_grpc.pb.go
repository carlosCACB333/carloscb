// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: util.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UtilService_SendEmail_FullMethodName = "/pb.UtilService/SendEmail"
)

// UtilServiceClient is the client API for UtilService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UtilServiceClient interface {
	SendEmail(ctx context.Context, in *SendEmailReq, opts ...grpc.CallOption) (*SendEmailRes, error)
}

type utilServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUtilServiceClient(cc grpc.ClientConnInterface) UtilServiceClient {
	return &utilServiceClient{cc}
}

func (c *utilServiceClient) SendEmail(ctx context.Context, in *SendEmailReq, opts ...grpc.CallOption) (*SendEmailRes, error) {
	out := new(SendEmailRes)
	err := c.cc.Invoke(ctx, UtilService_SendEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UtilServiceServer is the server API for UtilService service.
// All implementations must embed UnimplementedUtilServiceServer
// for forward compatibility
type UtilServiceServer interface {
	SendEmail(context.Context, *SendEmailReq) (*SendEmailRes, error)
	mustEmbedUnimplementedUtilServiceServer()
}

// UnimplementedUtilServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUtilServiceServer struct {
}

func (UnimplementedUtilServiceServer) SendEmail(context.Context, *SendEmailReq) (*SendEmailRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmail not implemented")
}
func (UnimplementedUtilServiceServer) mustEmbedUnimplementedUtilServiceServer() {}

// UnsafeUtilServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UtilServiceServer will
// result in compilation errors.
type UnsafeUtilServiceServer interface {
	mustEmbedUnimplementedUtilServiceServer()
}

func RegisterUtilServiceServer(s grpc.ServiceRegistrar, srv UtilServiceServer) {
	s.RegisterService(&UtilService_ServiceDesc, srv)
}

func _UtilService_SendEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilServiceServer).SendEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UtilService_SendEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilServiceServer).SendEmail(ctx, req.(*SendEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UtilService_ServiceDesc is the grpc.ServiceDesc for UtilService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UtilService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.UtilService",
	HandlerType: (*UtilServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendEmail",
			Handler:    _UtilService_SendEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "util.proto",
}
